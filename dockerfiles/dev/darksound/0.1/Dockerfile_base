# Start from NVIDIA's official CUDA image for Ubuntu 22.04 with compatible CUDA version
FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04

# Set environment variables
ENV LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    DEBIAN_FRONTEND=noninteractive \
    TZ=Etc/UTC

# Update and install required packages
RUN apt-get update && \
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone && \
    apt-get install -y tzdata sudo git curl wget figlet lolcat build-essential ffmpeg && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install Python 3, pip, and Python development headers
RUN apt-get update && \
    apt-get install -y python3 python3-venv python3-distutils python3-dev && \
    curl -sS https://bootstrap.pypa.io/get-pip.py | python3

# Install GDAL and its dependencies
RUN apt-get update && \
    apt-get install -y libgdal-dev gdal-bin

# Create a symbolic link for lolcat
RUN ln -s /usr/games/lolcat /usr/bin/lolcat

# Set GDAL environment variable (if needed)
ENV GDAL_CONFIG=/usr/bin/gdal-config

# Install Python packages with all specified dependencies and compatible versions
RUN python3 -m pip install \
    birdnetlib==0.13.2 \
    geopy==2.4.0 \
    psycopg2-binary==2.9.6 \
    pydub==0.25.1 \
    pyfiglet==1.0.2 \
    python-dotenv==1.0.0 \
    requests==2.31.0 \
    rich==12.5.1 \
    SQLAlchemy==2.0.20 \
    termcolor==2.3.0 \
    resampy==0.4.2 \
    ebird-api==3.0.6 \
    scikit-maad>=1.3.12 \
    scikit-image \
    tensorflow==2.15.0 \
    keras \
    numpy \
    scipy \
    soundfile \
    audioread \
    codecarbon \
    torch==2.0.0 \
    torchaudio==2.0.0 \
    torchvision==0.15.0 \
    pandas==1.3.5 \
    geopandas \
    hdbscan \
    --extra-index-url https://download.pytorch.org/whl/cu118

# Install Darksound from GitHub
RUN git clone https://github.com/ear-team/darksound.git /darksound
ENV PYTHONPATH="/darksound:${PYTHONPATH}"

# Append banner command to .bashrc
RUN echo "clear; figlet 'be/AudioML' | lolcat; echo \"\"" >> /root/.bashrc

# Set the working directory
WORKDIR /workdir

# Ensure NVIDIA Container Toolkit is used for GPU support
LABEL com.nvidia.volumes.needed="nvidia_driver"
LABEL com.nvidia.cuda.version="11.8"
